package src;
import java_cup.runtime.*;


terminal           SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, EQ, COLON,
                   IF, THEN, PRINT, WHILE,  DO, BEGIN,  END;
terminal Integer   INUM;
terminal Float     FNUM;
terminal String    ID;
terminal Boolean   BL;

non terminal Object             program;
non terminal Astat              statement, assignment, ifthen, vardec ,print, while, statement_part;
non terminal Lstat              statement_list;
non terminal Aexp               expr, factor, term;

program         ::= statement_list:s
                    {: s.execute(); :};

statement_list  ::= statement_list:l statement_part:s
                    {: RESULT = new Lstat(l,s) ; :}
                |   statement_part:s
                    {: RESULT = new Lstat(s); :}
                ;

statement_part  ::= statement:s
                    {: RESULT = s; :}
                SEMI;

statement       ::= assignment:s
                    {: RESULT = s; :}
                | vardec:s
                    {: RESULT = s; :}
                | ifthen:s
                    {: RESULT = s; :}
                | print:s
                    {: RESULT = s; :}
                | while:s
                    {: RESULT = s; :}
                | BEGIN statement_list:s END
                    {: RESULT = Astat.block(s); :}
                ;

while           ::= WHILE expr:e DO statement:s
                    {: RESULT = Astat.whileloop(e,s); :}
                ;

print           ::= PRINT expr:e
                    {: RESULT = Astat.print(e); :}
                ;

ifthen          ::= IF expr:e THEN statement:s
                    {: RESULT = Astat.ifthen(e,s); :}
                ;


assignment      ::= ID:i EQ expr:e
                    {: RESULT = Astat.assignment(i,e); :}
                ;

vardec          ::= ID:i COLON factor:f
                    {: RESULT = Astat.varDeclaration(i,f); :}
                ;

expr            ::= expr:e PLUS term:t
                    {: RESULT = new Aexp(new Args(e,t), sym.PLUS); :}
                | expr:e MINUS term:t
                    {: RESULT = new Aexp(new Args(e,t), sym.MINUS); :}
                | term:t
                    {: RESULT = t; :};

term            ::= term:t TIMES factor:f
                    {: RESULT = new Aexp(new Args(t,f), sym.TIMES); :}
                | term:t DIVIDE factor:f
                    {: RESULT = new Aexp(new Args(t,f), sym.DIVIDE); :}
                | factor:f
                    {: RESULT = f; :};

factor          ::= LPAREN expr:e RPAREN
                    {: RESULT = e; :}
                | INUM:n
                    {: RESULT = new Aexp(n); :}
                | FNUM:f
                    {: RESULT = new Aexp(f); :}
                | ID:i
                    {: RESULT = new Aexp(i); :}
                | BL:b
                    {: RESULT = new Aexp(b); :};

