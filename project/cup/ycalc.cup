package src;
import java.util.*;
import java_cup.runtime.*;


terminal           SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, EQ, LSHIFT,LBRACK,RBRACK,
                   EQEQ,NEQ, GT, LT, LTEQ, GTEQ, AND, OR, TYPE,
                   IF, ELSEIF, ELSE, THEN, CONSOLE, WHILE,  DO, BEGIN,  END, COMMA, DEF, RETURN;

terminal Integer   IVAL;
terminal Float     FVAL;
terminal String    ID;
terminal Boolean   BLVAL;
terminal char      CHARVAL;

non terminal Object              program;
non terminal Astat               statement, assignment, ifthen ,console , while, statement_part, assigntype, func_def;
non terminal Lstat               statement_list;
non terminal ArrayList<Aexp>     print_val, func_eval_params;
non terminal ArrayList<FuncArg>  func_args;
non terminal Aexp                expr, factor, group;

/* Precedences */
precedence left EQEQ, NEQ, GT, LT, LTEQ, GTEQ, AND, OR;
precedence left PLUS, MINUS;





program         ::= statement_list:s
                    {: s.execute(); :};

statement_list  ::= statement_list:l statement_part:s
                    {: RESULT = new Lstat(l,s) ; :}
                |   statement_part:s
                    {: RESULT = new Lstat(s); :}
                ;

statement_part  ::= statement:s
                    {: RESULT = s; :}
                SEMI;

statement       ::= assignment:s
                    {: RESULT = s; :}
                | assigntype:s
                    {: RESULT = s; :}
                | func_def:s
                    {: RESULT = s; :}
                | ifthen:s
                    {: RESULT = s; :}
                | console:s
                    {: RESULT = s; :}
                | while:s
                    {: RESULT = s; :}
                | BEGIN statement_list:s END
                    {: RESULT = Astat.block(s); :}
                | RETURN expr:e
                    {: RESULT = Astat.fnreturn(e); :}
                ;

assignment      ::= ID:i EQ expr:e
                    {: RESULT = Astat.assignment(i,e); :}
                |   ID:i LT expr:e_index GT EQ expr:e_val
                    {: RESULT = Astat.assignmentArray(i,e_index, e_val); :}
                ;

assigntype      ::= TYPE:t ID:i EQ expr:e
                    {: RESULT = Astat.assigntype(t.toString(),i,e); :} 
                |   TYPE:t ID:i  
                    {: RESULT = Astat.assigntype(t.toString(),i); :}
                | TYPE:t1 LT TYPE:t2 COMMA IVAL:size GT ID:i  
                    {: RESULT = Astat.assignTypeArray(t1.toString(),t2.toString(), size, i); :}
                ;


while           ::= WHILE expr:e THEN LBRACK statement:s RBRACK
                    {: RESULT = Astat.whileloop(e,s); :}
                ;

console         ::= CONSOLE LSHIFT print_val:p
                    {: RESULT = Astat.print(p); :} 
                ;

print_val       ::= print_val:p LSHIFT expr:e
                    {: RESULT = Astat.appendArrayList(p,e); :}
                | expr:e
                    {: RESULT = Astat.createArrayList(e); :}
                ;

func_def        ::= DEF ID:fn_id LPAREN func_args:fa RPAREN THEN TYPE:ret_type LBRACK statement:s RBRACK
                    {:    
                       RESULT = Astat.funcdef(fa, fn_id, ret_type.toString(), s); 
                    :}
                | DEF ID:fn_id LPAREN  RPAREN THEN TYPE:ret_type LBRACK statement:s RBRACK
                    {:
                        RESULT = Astat.funcdef(new ArrayList<FuncArg>(), fn_id, ret_type.toString(), s);
                    :}
                ;

func_args       ::= func_args:fa COMMA TYPE:arg_type ID:arg_id
                    {: 
                       RESULT = FuncArg.appendArrayList(fa, new FuncArg(arg_type.toString(), arg_id)); 
                    :}
                | TYPE:arg_type ID:arg_id
                    {:     
                        RESULT = FuncArg.createArrayList(new FuncArg(arg_type.toString(), arg_id)); 
                    :}
                ;


ifthen          ::= IF expr:e1 THEN LBRACK statement:s1 RBRACK
                    {: RESULT = Astat.ifthen(e1,s1); :}
                | IF expr:e1 THEN LBRACK statement:s1 RBRACK ELSE THEN LBRACK statement:s2 RBRACK
                    {: RESULT = Astat.ifelse(e1,s1,s2); :}
                | IF expr:e1 THEN LBRACK statement:s1 RBRACK ELSEIF expr:e2 THEN LBRACK statement:s2 RBRACK ELSE THEN LBRACK statement:s3 RBRACK
                    {: RESULT = Astat.ifthenelse(e1,s1,e2,s2,s3); :}
                ;

expr            ::= expr:e1 EQEQ expr:e2
                    {: RESULT = new Aexp(new Args(e1,e2), sym.EQEQ); :}
                | expr:e1 NEQ expr:e2
                    {: RESULT = new Aexp(new Args(e1,e2), sym.NEQ); :}
                | expr:e1 GT expr:e2
                    {: RESULT = new Aexp(new Args(e1,e2), sym.GT); :}
                | expr:e1 LT expr:e2
                    {: RESULT = new Aexp(new Args(e1,e2), sym.LT); :}
                | expr:e1 LTEQ expr:e2
                    {: RESULT = new Aexp(new Args(e1,e2), sym.LTEQ); :}
                | expr:e1 GTEQ expr:e2
                    {: RESULT = new Aexp(new Args(e1,e2), sym.GTEQ); :}
                | expr:e PLUS group:g
                    {: RESULT = new Aexp(new Args(e,g), sym.PLUS); :}
                | expr:e MINUS group:g
                    {: RESULT = new Aexp(new Args(e,g), sym.MINUS); :}
                | group:g
                    {: RESULT = g; :};

group            ::= group:g TIMES factor:f
                    {: RESULT = new Aexp(new Args(g,f), sym.TIMES); :}
                | group:g DIVIDE factor:f
                    {: RESULT = new Aexp(new Args(g,f), sym.DIVIDE); :}
                | factor:f
                    {: RESULT = f; :};

factor          ::= LPAREN expr:e RPAREN
                    {: RESULT = e; :}
                | IVAL:n
                    {: RESULT = new Aexp(n); :}
                | FVAL:f
                    {: RESULT = new Aexp(f); :}
                | LPAREN TYPE:t RPAREN IVAL:n
                    {: RESULT = Aexp.explicitConvert(t.toString(),n); :}
                | LPAREN TYPE:t RPAREN FVAL:f
                    {: RESULT = Aexp.explicitConvert(t.toString(),f); :}
                | ID:id LT ID:idx_id GT
                    {: 
                      RESULT = new Aexp(id, idx_id); 
                    :}
                | ID:i
                    {: RESULT = new Aexp(i); :}
                | BLVAL:b
                    {: RESULT = new Aexp(b); :}
                | CHARVAL:c
                    {: RESULT = new Aexp(c); :}
                | ID:id LT IVAL:idx_num GT
                    {: RESULT = new Aexp(id, idx_num); :}
                | ID:fn_id LPAREN func_eval_params:p RPAREN
                    {: RESULT = new Aexp(fn_id, p); :}
                | ID:fn_id LPAREN  RPAREN
                    {: RESULT = new Aexp(fn_id, new ArrayList<Aexp>()) ; :} 
                ;


func_eval_params  ::= func_eval_params:p COMMA expr:e
                    {: RESULT = Astat.appendArrayList(p,e); :}
                | expr:e
                    {: RESULT = Astat.createArrayList(e); :}
                ;

