package src;
import java.util.*;
import java_cup.runtime.*;


terminal           SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, EQ, LBRACE, RBRACE, LSHIFT,
                   EQEQ,NEQ, GT, LT, LTEQ, GTEQ, AND, OR, TYPE,
                   IF, ELSEIF, ELSE, THEN, CONSOLE, WHILE,  DO, BEGIN,  END, COMMA;

terminal Integer   IVAL;
terminal Float     FVAL;
terminal String    ID;
terminal Boolean   BLVAL;
terminal char      CHARVAL;

non terminal Object             program;
non terminal Astat              statement, assignment, ifthen ,console , while, statement_part, assigntype;
non terminal Lstat              statement_list;
non terminal ArrayList<Aexp>    print_val;
non terminal Aexp               expr, factor, group;

/* Precedences */
precedence left EQEQ, NEQ, GT, LT, LTEQ, GTEQ, AND, OR;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;



program         ::= statement_list:s
                    {: s.execute(); :};

statement_list  ::= statement_list:l statement_part:s
                    {: RESULT = new Lstat(l,s) ; :}
                |   statement_part:s
                    {: RESULT = new Lstat(s); :}
                ;

statement_part  ::= statement:s
                    {: RESULT = s; :}
                SEMI;

statement       ::= assignment:s
                    {: RESULT = s; :}
                | assigntype:s
                    {: RESULT = s; :}
                | ifthen:s
                    {: RESULT = s; :}
                | console:s
                    {: RESULT = s; :}
                | while:s
                    {: RESULT = s; :}
                | BEGIN statement_list:s END
                    {: RESULT = Astat.block(s); :}
                ;

assignment      ::= ID:i EQ expr:e
                    {: RESULT = Astat.assignment(i,e); :}
                |   ID:i LT expr:e_index GT EQ expr:e_val
                    {: RESULT = Astat.assignmentArray(i,e_index, e_val); :}
                ;

assigntype      ::= TYPE:t ID:i EQ expr:e
                    {: RESULT = Astat.assigntype(t.toString(),i,e); :} 
                |   TYPE:t ID:i  
                    {: RESULT = Astat.assigntype(t.toString(),i); :}
                | TYPE:t1 LT TYPE:t2 COMMA IVAL:size GT ID:i  
                    {: RESULT = Astat.assignTypeArray(t1.toString(),t2.toString(), size, i); :}
                ;


while           ::= WHILE expr:e THEN statement:s 
                    {: RESULT = Astat.whileloop(e,s); :}
                ;



console         ::= CONSOLE LSHIFT print_val:p
                    {: RESULT = Astat.print(p); :} 
                ;

print_val       ::= print_val:p LSHIFT expr:e
                    {: RESULT = Astat.appendPrintArrayList(p,e); :}
                | expr:e
                    {: RESULT = Astat.createPrintArrayList(e); :}
                ;

ifthen          ::= IF expr:e THEN LBRACE statement:s RBRACE
                    {: RESULT = Astat.ifthen(e,s); :}
                | ELSEIF expr:e THEN LBRACE statement:s RBRACE
                    {: RESULT = Astat.ifthen(e,s); :}
                ;

expr            ::= expr:e EQEQ group:g
                    {: RESULT = new Aexp(new Args(e,g), sym.EQEQ); :}
                | expr:e PLUS group:g
                    {: RESULT = new Aexp(new Args(e,g), sym.PLUS); :}
                | expr:e MINUS group:g
                    {: RESULT = new Aexp(new Args(e,g), sym.MINUS); :}
                | group:g
                    {: RESULT = g; :};

group            ::= group:g TIMES factor:f
                    {: RESULT = new Aexp(new Args(g,f), sym.TIMES); :}
                | group:g DIVIDE factor:f
                    {: RESULT = new Aexp(new Args(g,f), sym.DIVIDE); :}
                | factor:f
                    {: RESULT = f; :};

factor          ::= LPAREN expr:e RPAREN
                    {: RESULT = e; :}
                | IVAL:n
                    {: RESULT = new Aexp(n); :}
                | FVAL:f
                    {: RESULT = new Aexp(f); :}
                | ID:id LT ID:idx_id GT
                    {: 
                      RESULT = new Aexp(id, idx_id); 
                    :}
                | ID:i
                    {: RESULT = new Aexp(i); :}
                | BLVAL:b
                    {: RESULT = new Aexp(b); :}
                | CHARVAL:c
                    {: RESULT = new Aexp(c); :}
                | ID:id LT IVAL:idx_num GT
                    {: RESULT = new Aexp(id, idx_num); :}
                
                ;
